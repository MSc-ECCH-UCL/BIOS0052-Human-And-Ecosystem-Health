tmin_daily = terra::rast("data/era5-land/tmin_daily_cali_20152023.tif")
# examine - this contains multiple layers (one per day)
tmin_daily
#
terra::nlyr(tmin_daily)
#
names(tmin_daily)[1]
#
names(tmin_daily)[1] # start date
names(tmin_daily)[nlyr(tmin_daily)]
# extract from this layer - minimum temperature was 9.43 degrees celcius
tmin_daily_5jan = tmin_daily[[5]]
tmin_daily_5jan
terra::extract(tmin_daily_5jan, sd_loc, ID=FALSE)
# create a data frame of containing the XY coordinates
sd_loc = data.frame(Location = "San Diego", x = -117.126, y = 32.728)
# convert into an sf object and look at it - now it has a geometry field
sd_loc = sf::st_as_sf(sd_loc, coords = c("x", "y"))
sd_loc
# ensure the CRS is harmonised with the raster data
sf::st_crs(sd_loc) = terra::crs(tmin_daily)
# examine the names
# we can see that the fifth layer is the 5th Jan 2015
names(tmin_daily)[1:10]
# extract from this layer - minimum temperature was 9.43 degrees celcius
tmin_daily_5jan = tmin_daily[[5]]
terra::extract(tmin_daily_5jan, sd_loc, ID=FALSE)
# run terra::extract on the entire raster stack
# outputs a dataframe with columns as layers, and rows as locations
# a bit difficult to see what's going on as it's a very wide 1-row dataframe!
sd_daily = terra::extract(tmin_daily, sd_loc, ID=FALSE)
# convert to a longform dataframe using pivot_longer
sd_daily = sd_daily %>%
tidyr::pivot_longer(cols = everything(), names_to = "date", values_to = "tmin")
# what is in this dataframe?
head(sd_daily)
# to work effectively with dates/times in R, we need to ensure they are encoded in the correct format
# check the current class of the "date" column - stored as a character
class(sd_daily$date)
# convert to a date format
# remove the "X" from the start of the string, then format as a Date
# now R can recognise the sequential nature of the dates for plotting and analysis
sd_daily$date = substr(sd_daily$date, 2, 15)
sd_daily$date = as.Date(sd_daily$date, format="%Y_%m_%d")
class(sd_daily$date)
sd_plot = ggplot() +
geom_line(data=sd_daily, aes(date, tmin), color="skyblue4") +
theme_classic() +
xlab("Date") + ylab("Tmin") +
ggtitle("Daily minimum temperatures, San Diego, 2015-2023") +
theme(plot.title=element_text(size=12, hjust=0.5))
sd_plot
# mean daily nighttime temperature in the present-day for July (1981-2010)
gc = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_present_cali.tif")
# make data frame for plotting and change column title
gc_df = as.data.frame(gc, xy=TRUE) %>%
dplyr::rename("tmin_july"=`tmin_present_1981-2020`)
map_present = ggplot() +
geom_raster(data=gc_df, aes(x, y, fill=tmin_july)) +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily minimum temperature\n(July, 1981-2010, CHELSA dataset)") +
theme(plot.title=element_text(size=11, hjust=0.5)) +
geom_point(data=cities, aes(Longitude, Latitude), color="blue", fill="yellow", pch=21, size=3)
# cities data for later analyses
cities = data.frame(
City = c("San Diego", "San Francisco", "Las Vegas", "Palm Springs"),
Longitude = c(-117.126, -122.422, -115.147, -116.527),
Latitude = c(32.728, 37.768, 36.166, 33.836),
Population_2020 = c(1386932, 873965, 641903, 44575)
)
map_present = ggplot() +
geom_raster(data=gc_df, aes(x, y, fill=tmin_july)) +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily minimum temperature\n(July, 1981-2010, CHELSA dataset)") +
theme(plot.title=element_text(size=11, hjust=0.5)) +
geom_point(data=cities, aes(Longitude, Latitude), color="blue", fill="yellow", pch=21, size=3)
map_present
# read in rasters
gc_2070 = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_2070_cali.tif")
# names of each layer contain information on:
# climate metric (tmin)
# rcp-ssp scenario (emissions-socioeconomic)
# gcm (model used to project future climate)
# final year of climatology (here, 2070)
names(gc_2070)
# create a coordinates object for a specific city
sd = cities %>%
dplyr::filter(City == "San Diego") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
# extract july tmin for the present day reference period
# creating columns for "year", "scenario" and model
tmin_pres = terra::extract(gc, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2010", scenario = "Present", model = "Observed")
# extract the temperatures in the future
tmin_2070 = terra::extract(gc_2070, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2070")
# extract the names of the scenario and gcm from the raster layer name
# this code splits the names by underscores
# then subsets to the specific sections we want
tmin_2070$scenario = unlist(lapply(strsplit(tmin_2070$layer, "_"), "[", 2))
tmin_2070$model = unlist(lapply(strsplit(tmin_2070$layer, "_"), "[", 3))
# look at future data
head(tmin_2070, 10)
# combine present and future data in one data frame
tmin_change = rbind(tmin_pres, tmin_2070)
# plot the changes, colouring points by different GCMs
# includes a dashed horizontal line to reflect the present day baseline
futures_sd = tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(sd$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean night-time temperature") +
theme(plot.title = element_text(size=12, hjust=0.5),
axis.text = element_text(size=11),
axis.title = element_text(size=11.5))+
xlab("Scenario")
futures_sd
# create coordinates object for Las Vegas
sd = cities %>%
dplyr::filter(City == "Las Vegas") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
sd
# create coordinates object for Las Vegas
lv = cities %>%
dplyr::filter(City == "Las Vegas") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
# extract july tmin for the present day reference period
# creating columns for "year", "scenario" and model
tmin_pres = terra::extract(gc, lv, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2010", scenario = "Present", model = "Observed")
# extract the temperatures in the future
tmin_2070 = terra::extract(gc_2070, lv, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2070")
# extract the names of the scenario and gcm from the raster layer name
# this code splits the names by underscores
# then subsets to the specific sections we want
tmin_2070$scenario = unlist(lapply(strsplit(tmin_2070$layer, "_"), "[", 2))
tmin_2070$model = unlist(lapply(strsplit(tmin_2070$layer, "_"), "[", 3))
# combine present and future data in one data frame
tmin_change = rbind(tmin_pres, tmin_2070)
# plot the changes, colouring points by different GCMs
# includes a dashed horizontal line to reflect the present day baseline
futures_lv = tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(sd$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean night-time temperature") +
theme(plot.title = element_text(size=12, hjust=0.5),
axis.text = element_text(size=11),
axis.title = element_text(size=11.5))+
xlab("Scenario")
futures_lv
# plot the changes, colouring points by different GCMs
# includes a dashed horizontal line to reflect the present day baseline
futures_lv = tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(lv$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean night-time temperature") +
theme(plot.title = element_text(size=12, hjust=0.5),
axis.text = element_text(size=11),
axis.title = element_text(size=11.5))+
xlab("Scenario")
futures_lv
# combined plot
gridExtra::grid.arrange(futures_sd, futures_lv, nrow=1)
# combined plot
library(patchwork)
futures_sd + futures_lv
futures_sd + futures_lv + patchwork::plot_layout(guides = "collect")
plot1 = tmin %>%
as.data.frame(xy=TRUE) %>%
ggplot() +
geom_raster(aes(x, y, fill=mean)) +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily nighttime temperature (2000-2023)") +
theme(plot.title=element_text(size=11, hjust=0.5)) +
geom_point(data=cities, aes(x, y), color="blue", fill="yellow", pch=21, size=3)
plot1
plot1 = tmin %>%
as.data.frame(xy=TRUE) %>%
ggplot() +
geom_raster(aes(x, y, fill=mean)) +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily nighttime temperature (2000-2023)") +
theme(plot.title=element_text(size=11, hjust=0.5)) +
geom_point(data=cities, aes(Longitude, Latitude), color="blue", fill="yellow", pch=21, size=3)
plot1
# for saving everything
thresholds = data.frame()
dailies = data.frame()
hotnights1 = data.frame()
hotnights2 = data.frame()
# for saving everything
thresholds = data.frame()
dailies = data.frame()
hotnights2 = data.frame()
# for each city (1 in 1:4)
for(i in 1:nrow(cities)){
# get the info for city i and create sf object
ct = cities[i, ]
ct = ct %>% sf::st_as_sf(coords = c("Longitude", "Latitude"))
# extract daily time series, format date
sf::st_crs(ct) = terra::crs(tmin_daily)
dailies_i = terra::extract(tmin_daily, ct, ID=FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "date", values_to = "tmin")
dailies_i$date = substr(dailies_i$date, 2, 15)
dailies_i$date = as.Date(dailies_i$date, format="%Y_%m_%d")
dailies = rbind(dailies, dailies_i %>% dplyr::mutate(City = ct$City))
# calculate local hot nights threshold
tmin_upper = terra::rast("./data/era5_land/tmin_upper95_cali.tif")
thresh_i = terra::extract(tmin_upper, ct, ID=FALSE)$`q0.95`
thresh_i = data.frame(City = ct$City, threshold = thresh_i)
# add to data frame of thresholds
thresholds = rbind(thresholds, thresh_i)
# create dataframe and summarise hot nights based on 20C threshold
hn1 = dailies_i %>%
dplyr::filter(tmin > 20) %>%
dplyr::mutate(year = lubridate::year(date))
hn1 = as.data.frame(table(hn1$year)) %>%
dplyr::mutate(City = ct$City)
hn1$exposure = (hn1$Freq * ct$Population_2020) / 10^6
hn1$threshold_type = "20C"
# add to combined data frame
hotnights1 = rbind(hotnights1, hn1)
# create dataframe and summarise hot nights based on local threshold
hn2 = dailies_i %>% dplyr::filter(tmin > thresh_i) %>%
dplyr::mutate(year = lubridate::year(date))
hn2 = as.data.frame(table(hn2$year)) %>%
dplyr::mutate(City = ct$City)
hn2$exposure = (hn2$Freq * ct$Population_2020) / 10^6
hn2$threshold_type = "Local"
# add to combined data frame
hotnights2 = rbind(hotnights2, hn2)
}
# this is a loop to extract the same information for every city and combine it
# you probably approached this by copying the same code block several times and that is fine
# the below is just more effficient for coding space
getwd()
# for saving everything
thresholds = data.frame()
dailies = data.frame()
hotnights1 = data.frame()
hotnights2 = data.frame()
i = 1
# get the info for city i and create sf object
ct = cities[i, ]
ct = ct %>% sf::st_as_sf(coords = c("Longitude", "Latitude"))
# extract daily time series, format date
sf::st_crs(ct) = terra::crs(tmin_daily)
dailies_i = terra::extract(tmin_daily, ct, ID=FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "date", values_to = "tmin")
dailies_i$date = as.Date(dailies_i$date, format="%Y_%m_%d")
dailies = rbind(dailies, dailies_i %>% dplyr::mutate(City = ct$City))
# calculate local hot nights threshold
tmin_upper = terra::rast("./data/era5_land/tmin_upper95_cali.tif")
# calculate local hot nights threshold
tmin_upper = terra::rast("./data/era5-land/tmin_upper95_cali.tif")
# for saving everything
thresholds = data.frame()
dailies = data.frame()
hotnights1 = data.frame()
hotnights2 = data.frame()
# for each city (1 in 1:4)
for(i in 1:nrow(cities)){
# get the info for city i and create sf object
ct = cities[i, ]
ct = ct %>% sf::st_as_sf(coords = c("Longitude", "Latitude"))
# extract daily time series, format date
sf::st_crs(ct) = terra::crs(tmin_daily)
dailies_i = terra::extract(tmin_daily, ct, ID=FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "date", values_to = "tmin")
dailies_i$date = substr(dailies_i$date, 2, 15)
dailies_i$date = as.Date(dailies_i$date, format="%Y_%m_%d")
dailies = rbind(dailies, dailies_i %>% dplyr::mutate(City = ct$City))
# calculate local hot nights threshold
tmin_upper = terra::rast("./data/era5-land/tmin_upper95_cali.tif")
thresh_i = terra::extract(tmin_upper, ct, ID=FALSE)$`q0.95`
thresh_i = data.frame(City = ct$City, threshold = thresh_i)
# add to data frame of thresholds
thresholds = rbind(thresholds, thresh_i)
# create dataframe and summarise hot nights based on 20C threshold
hn1 = dailies_i %>%
dplyr::filter(tmin > 20) %>%
dplyr::mutate(year = lubridate::year(date))
hn1 = as.data.frame(table(hn1$year)) %>%
dplyr::mutate(City = ct$City)
hn1$exposure = (hn1$Freq * ct$Population_2020) / 10^6
hn1$threshold_type = "20C"
# add to combined data frame
hotnights1 = rbind(hotnights1, hn1)
# create dataframe and summarise hot nights based on local threshold
hn2 = dailies_i %>% dplyr::filter(tmin > thresh_i) %>%
dplyr::mutate(year = lubridate::year(date))
hn2 = as.data.frame(table(hn2$year)) %>%
dplyr::mutate(City = ct$City)
hn2$exposure = (hn2$Freq * ct$Population_2020) / 10^6
hn2$threshold_type = "Local"
# add to combined data frame
hotnights2 = rbind(hotnights2, hn2)
}
i = 1
# get the info for city i and create sf object
ct = cities[i, ]
ct = ct %>% sf::st_as_sf(coords = c("Longitude", "Latitude"))
# extract daily time series, format date
sf::st_crs(ct) = terra::crs(tmin_daily)
dailies_i = terra::extract(tmin_daily, ct, ID=FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "date", values_to = "tmin")
dailies_i = terra::extract(tmin_daily, ct, ID=FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "date", values_to = "tmin")
dailies_i$date = substr(dailies_i$date, 2, 15)
dailies_i$date = substr(dailies_i$date, 2, 15)
dailies_i$date = as.Date(dailies_i$date, format="%Y_%m_%d")
dailies = rbind(dailies, dailies_i %>% dplyr::mutate(City = ct$City))
# calculate local hot nights threshold
tmin_upper = terra::rast("./data/era5-land/tmin_upper95_cali.tif")
thresh_i = terra::extract(tmin_upper, ct, ID=FALSE)$`q0.95`
thresh_i = data.frame(City = ct$City, threshold = thresh_i)
thresh_i
# add to data frame of thresholds
thresholds = rbind(thresholds, thresh_i)
# create dataframe and summarise hot nights based on 20C threshold
hn1 = dailies_i %>%
dplyr::filter(tmin > 20) %>%
dplyr::mutate(year = lubridate::year(date))
hn1 = as.data.frame(table(hn1$year)) %>%
dplyr::mutate(City = ct$City)
hn1$exposure = (hn1$Freq * ct$Population_2020) / 10^6
hn1$threshold_type = "20C"
# add to combined data frame
hotnights1 = rbind(hotnights1, hn1)
head(thresh_i)
# create dataframe and summarise hot nights based on local threshold
hn2 = dailies_i %>% dplyr::filter(tmin > thresh_i$threshold) %>%
dplyr::mutate(year = lubridate::year(date))
hn2 = as.data.frame(table(hn2$year)) %>%
dplyr::mutate(City = ct$City)
hn2$threshold_type = "Local"
# for saving everything
thresholds = data.frame()
hotnights1 = data.frame()
hotnights2 = data.frame()
# for each city (1 in 1:4)
for(i in 1:nrow(cities)){
# get the info for city i and create sf object
ct = cities[i, ]
ct = ct %>% sf::st_as_sf(coords = c("Longitude", "Latitude"))
# extract daily time series, format date
sf::st_crs(ct) = terra::crs(tmin_daily)
dailies_i = terra::extract(tmin_daily, ct, ID=FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "date", values_to = "tmin")
dailies_i$date = substr(dailies_i$date, 2, 15)
dailies_i$date = as.Date(dailies_i$date, format="%Y_%m_%d")
dailies = rbind(dailies, dailies_i %>% dplyr::mutate(City = ct$City))
# calculate local hot nights threshold
tmin_upper = terra::rast("./data/era5-land/tmin_upper95_cali.tif")
thresh_i = terra::extract(tmin_upper, ct, ID=FALSE)$`q0.95`
thresh_i = data.frame(City = ct$City, threshold = thresh_i)
# add to data frame of thresholds
thresholds = rbind(thresholds, thresh_i)
# create dataframe and summarise hot nights based on 20C threshold
hn1 = dailies_i %>%
dplyr::filter(tmin > 20) %>%
dplyr::mutate(year = lubridate::year(date))
hn1 = as.data.frame(table(hn1$year)) %>%
dplyr::mutate(City = ct$City)
hn1$exposure = (hn1$Freq * ct$Population_2020) / 10^6
hn1$threshold_type = "20C"
# add to combined data frame
hotnights1 = rbind(hotnights1, hn1)
# create dataframe and summarise hot nights based on local threshold
hn2 = dailies_i %>% dplyr::filter(tmin > thresh_i$threshold) %>%
dplyr::mutate(year = lubridate::year(date))
hn2 = as.data.frame(table(hn2$year)) %>%
dplyr::mutate(City = ct$City)
hn2$exposure = (hn2$Freq * ct$Population_2020) / 10^6
hn2$threshold_type = "Local"
# add to combined data frame
hotnights2 = rbind(hotnights2, hn2)
}
# look at outputs
head(thresholds)
head(hotnights1)
head(hotnights2)
# compare thresholds between cities
thresholds %>%
ggplot() +
geom_point(aes(City, threshold), size=5, color="skyblue4") +
ylab("Hot night threshold") +
coord_flip() +
theme_bw()
# 2b. we can see this if we plot the local climatology - very different daily dynamics of temperature
dailies %>%
ggplot() +
geom_line(aes(date, tmin, group=City, color=City)) +
theme_classic() +
xlab("Date") + ylab("Minimum temperature")
dailies
table(dailies$date)
# 3. defining hot nights across different areas leads to totally different results if using a
# fixed threshold - potential underestimate in SF, massive overestimate in LV
# why?
hotnights1 %>%
rbind(hotnights2) %>%
ggplot() +
geom_point(aes(as.numeric(as.vector(Var1)), Freq, color=threshold_type)) +
geom_line(aes(as.numeric(as.vector(Var1)), Freq, color=threshold_type)) +
theme_bw() +
xlab("Year") + ylab("Number of hot nights") +
facet_wrap(~City)
# very different conclusions based on both
# population exposure (exposure matters!) and threshold choice (model matters!)
# San Diego and San Francisco both have very large populations so high risk due to high exposure
# but if using a 20C threshold, potentially overpredicts risk in
# naturally hotter areas, and vice versa for cooler areas
hotnights1 %>%
rbind(hotnights2) %>%
ggplot() +
geom_point(aes(as.numeric(as.vector(Var1)), exposure, color=City)) +
geom_line(aes(as.numeric(as.vector(Var1)), exposure, color=City)) +
theme_bw() +
xlab("Year") + ylab("Exposure (millions person hours)") +
facet_wrap(~threshold_type)
# very different conclusions based on both
# population exposure (exposure matters!) and threshold choice (model matters!)
# San Diego and San Francisco both have very large populations so high risk due to high exposure
# but if using a 20C threshold, potentially overpredicts risk in
# naturally hotter areas, and vice versa for cooler areas
hotnights1 %>%
rbind(hotnights2) %>%
ggplot() +
geom_point(aes(as.numeric(as.vector(Var1)), exposure, color=City)) +
geom_line(aes(as.numeric(as.vector(Var1)), exposure, color=City)) +
theme_bw() +
xlab("Year") + ylab("Exposure (millions person hours)") +
facet_wrap(~threshold_type)
# present-day and future data
gc = terra::rast("C:/Users/roryj/Dropbox/Research/bios0052/data/chelsa/chelsa_tmin_present_cali.tif")
gc_2100 = terra::rast("data/chelsa/chelsa_tmin_2100_cali.tif")
gc_2100 = terra::rast("data/cmip6_chelsa/chelsa_tmin_2100_cali.tif")
# present-day and future data
gc = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_present_cali.tif")
gc_2100 = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_2100_cali.tif")
# san diego
sd = cities %>% dplyr::filter(City == "San Diego") %>%
sf::st_as_sf(coords = c("x", "y"))
# san diego
sd = cities %>% dplyr::filter(City == "San Diego") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
tmin_pres = terra::extract(gc, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2010", scenario = "Present", model = "Observed") # adding columns for "year", "scenario" and model
tmin_2100 = terra::extract(gc_2100, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2100") # adding columns for "year" and "scenario"
tmin_2100$scenario = unlist(lapply(strsplit(tmin_2100$layer, "_"), "[", 2))
tmin_2100$model = unlist(lapply(strsplit(tmin_2100$layer, "_"), "[", 3))
tmin_change = rbind(tmin_pres, tmin_2100)
plot_sandiego = tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(sd$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean daily minimum temperature")
plot_sandiego
# las vegas
sd = cities %>% dplyr::filter(City == "Las Vegas") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
tmin_pres = terra::extract(gc, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2010", scenario = "Present", model = "Observed") # adding columns for "year", "scenario" and model
tmin_2100 = terra::extract(gc_2100, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2100") # adding columns for "year" and "scenario"
tmin_2100$scenario = unlist(lapply(strsplit(tmin_2100$layer, "_"), "[", 2))
tmin_2100$model = unlist(lapply(strsplit(tmin_2100$layer, "_"), "[", 3))
tmin_change = rbind(tmin_pres, tmin_2100)
plot_lasvegas = tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(sd$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean daily minimum temperature")
# combine and compare
gridExtra::grid.arrange(plot_sandiego, plot_lasvegas, nrow=2)
plot_sandiego + plot_lasvegas + patchwork::plot_layout(guides = "collect")
