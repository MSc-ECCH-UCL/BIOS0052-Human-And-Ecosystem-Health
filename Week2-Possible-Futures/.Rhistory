ggtitle("Daily minimum temperatures, San Diego, 2015-2023") +
theme(plot.title=element_text(size=12, hjust=0.5))
sd_plot
# subset to identify dates meeting this criteria
hot_nights1 = sd_daily[ sd_daily$tmin > 20, ]
# how many? 183 over 9 years
nrow(hot_nights1)
# add points per hot night to our time series graph
# is there a pattern to when they occur?
sd_plot = sd_daily %>%
ggplot() +
geom_line(aes(date, tmin), color="skyblue4") +
theme_classic() +
xlab("Date") + ylab("Tmin") +
ggtitle("San Diego, hot nights 2015-2023 (20C threshold)") +
theme(plot.title=element_text(size=12, hjust=0.5)) +
geom_point(data = hot_nights1, aes(date, tmin), color="darkred")
sd_plot
# what about differences between years?
# use lubridate's "year" function to create an additional column for year
hot_nights1$year = lubridate::year(hot_nights1$date)
# calculate the number of hot nights per year
# what do you noice?
hotnights_annual1 = hot_nights1 %>%
dplyr::group_by(year) %>%
dplyr::summarise(n_hot_nights = length(date))
# extract 95th pc theshold
tmin_upper = terra::rast("./data/era5-land/tmin_upper95_cali.tif")
thresh = terra::extract(tmin_upper, sd_loc, ID=FALSE)
# apply the same threshold, visualise and calculate
hot_nights2 = sd_daily[ sd_daily$tmin > as.numeric(thresh), ]
nrow(hot_nights2) # 243 compared to 183 - over 30% increase!
# plot
sd_plot = sd_daily %>%
ggplot() +
geom_line(aes(date, tmin), color="skyblue4") +
theme_classic() +
xlab("Date") + ylab("Tmin") +
ggtitle("San Diego, hot nights 2015-2023 (local 95th percentile threshold)") +
theme(plot.title=element_text(size=12, hjust=0.5)) +
geom_point(data = hot_nights2, aes(date, tmin), color="darkred")
# calculate annual number of hot nights
hot_nights2$year = lubridate::year(hot_nights2$date)
hotnights_annual2 = hot_nights2 %>%
dplyr::group_by(year) %>%
dplyr::summarise(n_hot_nights = length(date))
# plot both on the same graph
annual_plot = dplyr::mutate(hotnights_annual1, threshold="20C") %>%
rbind(
dplyr::mutate(hotnights_annual2, threshold="Local")
) %>%
ggplot() +
geom_line(aes(year, n_hot_nights, color=threshold)) +
theme_classic() +
xlab("Year") + ylab("Number of hot nights") +
ggtitle("Annual number of hot nights, San Diego") +
theme(plot.title=element_text(size=12, hjust=0.5)) +
scale_color_viridis_d(option="magma", begin=0.2, end=0.7) +
scale_x_continuous(breaks=2015:2023, labels=2015:2023)
annual_plot
# plot hazard * exposure annually
exposure_plot = ggplot() +
geom_bar(data=hotnights_annual2, aes(year, person_nights_mill), stat="identity", fill="skyblue4", color="black") +
xlab("Year") + ylab("Millions of person nights") +
ggtitle("Population exposure to hot nights, San Diego") +
theme(plot.title=element_text()) +
theme_classic()
exposure_plot
# estimate person nights by multiplying the number of hot nights by population
hotnights_annual2$person_nights = hotnights_annual2$n_hot_nights * 1386932
# transform to millions of person nights for easier visualisation
hotnights_annual2$person_nights_mill = hotnights_annual2$person_nights/10^6
# plot hazard * exposure annually
exposure_plot = ggplot() +
geom_bar(data=hotnights_annual2, aes(year, person_nights_mill), stat="identity", fill="skyblue4", color="black") +
xlab("Year") + ylab("Millions of person nights") +
ggtitle("Population exposure to hot nights, San Diego") +
theme(plot.title=element_text()) +
theme_classic()
exposure_plot
# locations and population data
cities = data.frame(
City = c("San Diego", "San Francisco", "Las Vegas", "Palm Springs"),
Longitude = c(-117.126, -122.422, -115.147, -116.527),
Latitude = c(32.728, 37.768, 36.166, 33.836),
Population_2020 = c(1386932, 873965, 641903, 44575)
)
knitr::kable(cities)
cities
# locations and population data
cities = data.frame(
City = c("San Diego", "San Francisco", "Las Vegas", "Palm Springs"),
Longitude = c(-117.126, -122.422, -115.147, -116.527),
Latitude = c(32.728, 37.768, 36.166, 33.836),
Population_2020 = c(1386932, 873965, 641903, 44575)
)
knitr::kable(cities, align="cccc")
# locations and population data
cities = data.frame(
City = c("San Diego", "San Francisco", "Las Vegas", "Palm Springs"),
Longitude = c(-117.126, -122.422, -115.147, -116.527),
Latitude = c(32.728, 37.768, 36.166, 33.836),
Population_2020 = c(1386932, 873965, 641903, 44575)
)
knitr::kable(cities, align="cccc")
# mean daily nighttime temperature in the present-day for July (1981-2010)
gc = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_present_cali.tif")
# start by visualising present day patterns
# we can add the cities
# you may notice that this is more high-resolution; based on the same source data but statistically downscaled
map_present = gc %>%
as.data.frame(xy=TRUE) %>%
dplyr::rename("tmin_july"=`tmin_present_1981-2020`) %>%
ggplot() +
geom_raster(aes(x, y, fill=tmin_july)) +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily minimum temperature (July 1981-2010)") +
theme(plot.title=element_text(size=11, hjust=0.5)) +
geom_point(data=cities, aes(x, y), color="blue", fill="yellow", pch=21, size=3)
map_present
gc %>%
as.data.frame(xy=TRUE) %>%
dplyr::rename("tmin_july"=`tmin_present_1981-2020`)
map_present = gc %>%
as.data.frame(xy=TRUE) %>%
dplyr::rename("tmin_july"=`tmin_present_1981-2020`)
head(map_present)
# start by visualising present day patterns
# we can add the cities
# you may notice that this is more high-resolution; based on the same source data but statistically downscaled
map_present = gc %>%
as.data.frame(xy=TRUE) %>%
dplyr::rename("tmin_july"=`tmin_present_1981-2020`) %>%
ggplot() +
geom_raster(aes(x, y, fill=tmin_july)) +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily minimum temperature (July 1981-2010)") +
theme(plot.title=element_text(size=11, hjust=0.5)) +
geom_point(data=cities, aes(Longitude, Latitude), color="blue", fill="yellow", pch=21, size=3)
map_present
# start by visualising present day patterns
# we can add the cities
# you may notice that this is more high-resolution; based on the same source data but statistically downscaled
map_present = gc %>%
as.data.frame(xy=TRUE) %>%
dplyr::rename("tmin_july"=`tmin_present_1981-2020`) %>%
ggplot() +
geom_raster(aes(x, y, fill=tmin_july)) +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily minimum temperature\n(July, 1981-2010, CHELSA dataset)") +
theme(plot.title=element_text(size=11, hjust=0.5)) +
geom_point(data=cities, aes(Longitude, Latitude), color="blue", fill="yellow", pch=21, size=3)
map_present
# mean daily nighttime temperature in the present-day for July (1981-2010)
gc = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_present_cali.tif")
# visualise including city locations
map_present = gc %>%
as.data.frame(xy=TRUE) %>%
dplyr::rename("tmin_july"=`tmin_present_1981-2020`) %>%
ggplot() +
geom_raster(aes(x, y, fill=tmin_july)) +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily minimum temperature\n(July, 1981-2010, CHELSA dataset)") +
theme(plot.title=element_text(size=11, hjust=0.5)) +
geom_point(data=cities, aes(Longitude, Latitude), color="blue", fill="yellow", pch=21, size=3)
gc_2070 = terra::rast("data/chelsa/chelsa_tmin_2070_cali.tif")
# read in rasters
gc_2070 = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_2070_cali.tif")
gc_2070
names(gc_2070)
# create a coordinates object for a specific city
sd = cities %>%
dplyr::filter(City == "San Diego") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
sd
# extract july tmin for the present day reference period
# creating columns for "year", "scenario" and model
tmin_pres = terra::extract(gc, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2010", scenario = "Present", model = "Observed")
tmin_pres
head(tmin_pres, 10)
# extract the names of the scenario and gcm from the raster layer name
# this code splits the names by underscores
# then subsets to the specific sections we want
tmin_2070$scenario = unlist(lapply(strsplit(tmin_2070$layer, "_"), "[", 2))
# extract the temperatures in the future
tmin_2070 = terra::extract(gc_2070, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2070")
# extract the names of the scenario and gcm from the raster layer name
# this code splits the names by underscores
# then subsets to the specific sections we want
tmin_2070$scenario = unlist(lapply(strsplit(tmin_2070$layer, "_"), "[", 2))
tmin_2070$model = unlist(lapply(strsplit(tmin_2070$layer, "_"), "[", 3))
head(tmin_2070, 10)
# plot the changes
tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(sd$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean daily minimum temperature")
# combine present and future data in one data frame
tmin_change = rbind(tmin_pres, tmin_2070)
# plot the changes
tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(sd$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean daily minimum temperature")
# plot the changes
futures_sd = tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(sd$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean night-time temperature") +
theme(plot.title = element_text(size=12, hjust=0.5))
futures_sd
setwd("C:/Users/roryj/Documents/Research/teaching/BIOS0052-Human-And-Ecosystem-Health/Week2-Possible-Futures/")
# package dependencies
# use the "install.packages()" command if not already installed
library(terra); library(dplyr); library(magrittr); library(ggplot2); library(sf)
library(rstudioapi); library(tidyr)
# the "terra" package is the core package for working with raster data in R
# read in the raster using the "rast" function
tmin = terra::rast("data/era5-land/tmin_mean_cali.tif")
tmin
103*95
plot(tmin)
r = tmin %>%
as.data.frame(xy=TRUE)
head(r)
plot1 = tmin %>%
as.data.frame(xy=TRUE) %>%
ggplot() +
geom_raster(aes(x, y, fill=mean))
plot1
# you can add additional customisations to an existing ggplot object
# to improve the visualisation let's tweak the theme
# and add a better colour scale
plot1 = plot1 +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily nighttime temperature (2000-2023)") +
theme(plot.title=element_text(size=11, hjust=0.5))
# you can add additional customisations to an existing ggplot object
# to improve the visualisation let's tweak the theme
# and add a better colour scale
plot1 = plot1 +
scale_fill_viridis_c(option="magma", name="Tmin (C)") +
theme_classic() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Mean daily nighttime temperature (2000-2023)") +
theme(plot.title=element_text(size=11, hjust=0.5))
plot1
shp = sf::st_read("./data/shapefiles/usa_counties_sw.shp")
head(shp)
head(shp)
# ggplot2 provides excellent functionality for working with sf objects
# let's add these admin boundaries to "plot1" using the geom_sf function
plot1 = plot1 +
geom_sf(data=shp, fill=NA, color="black")
# take a look - are temperatures fairly similar geographically, or fairly variable?
# why might this be?
plot1
# daily
tmin_daily = terra::rast("data/era5-land/tmin_daily_cali_20152023.tif")
tmin_daily
names(tmin_daily)
tmin_daily[[ 926 ]]
plot(tmin_daily[[ 926 ]])
plot(tmin_daily[[ 926 ]])
plot(tmin_daily[[ 1 ]])
# we can plot a subset to see more clearly what we have
plot(tmin_daily[[5:10]])
# create a data frame of containing the XY coordinates
sd_loc = data.frame(Location = "San Diego", x = -117.126, y = 32.728)
# create a data frame of containing the XY coordinates
sd_loc = data.frame(Location = "San Diego", x = -117.126, y = 32.728)
sd_loc
# convert into an sf object and look at it - now it has a geometry field
sd_loc = sf::st_as_sf(sd_loc, coords = c("x", "y"))
# convert into an sf object and look at it - now it has a geometry field
sd_loc = sf::st_as_sf(sd_loc, coords = c("x", "y"))
sd_loc
terra::crs(tmin_daily)
# ensure the CRS is harmonised with the raster data
sf::st_crs(sd_loc) = terra::crs(tmin_daily)
sd_loc
plot1 +
geom_sf(data=sd_loc, color="yellow", size=3)
plot1 +
geom_sf(data=sd_loc, color="blue", size=3)
tmin_daily
tmin_daily[[5]]
terra::extract(tmin_daily[[5]], sd_loc)
terra::extract(tmin_daily[[5]], sd_loc)
# run terra::extract on the entire raster stack
# outputs a dataframe with columns as layers, and rows as locations
# a bit difficult to see what's going on as it's a very wide 1-row dataframe!
sd_daily = terra::extract(tmin_daily, sd_loc, ID=FALSE)
head(sd_daily)
View(sd_daily)
# convert to a longform dataframe using pivot_longer
# what is in this dataframe?
sd_daily = sd_daily %>%
tidyr::pivot_longer(cols = everything(), names_to = "date", values_to = "tmin")
head(sd_daily)
# to work effectively with dates/times in R, we need to ensure they are encoded in the correct format
# check the current class of the "date" column - stored as a character
class(sd_daily$date)
# convert to a date format
# remove the "X" from the start of the string, then format as a Date
# now R can recognise the sequential nature of the dates for plotting and analysis
sd_daily$date = substr(sd_daily$date, 2, 15)
head(sd_daily)
sd_daily$date
sd_daily$date = as.Date(sd_daily$date, format="%Y_%m_%d")
class(sd_daily$date)
hot_nights1 = sd_daily[ sd_daily$tmin > 20, ]
hot_nights1 = sd_daily[ sd_daily$tmin > 20, ]
head()
head(hot_nights1)
nrow(hot_nights1)
# is there a pattern to when they occur?
sd_plot = sd_daily %>%
ggplot() +
geom_line(aes(date, tmin), color="skyblue4") +
theme_classic() +
xlab("Date") + ylab("Tmin") +
ggtitle("San Diego, hot nights 2015-2023 (20C threshold)") +
theme(plot.title=element_text(size=12, hjust=0.5)) +
geom_point(data = hot_nights1, aes(date, tmin), color="darkred")
sd_plot
# what about differences between years?
# use lubridate's "year" function to create an additional column for year
hot_nights1$year = lubridate::year(hot_nights1$date)
head(hot_nights1)
# calculate the number of hot nights per year
# what do you noice?
hotnights_annual1 = hot_nights1 %>%
dplyr::group_by(year) %>%
dplyr::summarise(n_hot_nights = length(date))
hotnights_annual1
tmin_95 = terra::rast("data/era5-land/tmin_upper95_cali.tif")
plot(tmin_95)
plot(tmin_95)
sd_95 = terra::extract(tmin_95, sd_loc)
sd_95
hot_nights2 = sd_daily[ sd_daily$tmin > 19.95, ]
hot_nights2 = sd_daily[ sd_daily$tmin > 19.59908, ]
head(hot_nights2)
nrow(hot_nights2)
# calculate annual number of hot nights
hot_nights2$year = lubridate::year(hot_nights2$date)
hotnights_annual2 = hot_nights2 %>%
dplyr::group_by(year) %>%
dplyr::summarise(n_hot_nights = length(date))
hotnights_annual2
# plot both on the same graph
annual_plot = dplyr::mutate(hotnights_annual1, threshold="20C") %>%
rbind(
dplyr::mutate(hotnights_annual2, threshold="Local")
) %>%
ggplot() +
geom_line(aes(year, n_hot_nights, color=threshold)) +
theme_classic() +
xlab("Year") + ylab("Number of hot nights") +
ggtitle("Annual number of hot nights, San Diego") +
theme(plot.title=element_text(size=12, hjust=0.5)) +
scale_color_viridis_d(option="magma", begin=0.2, end=0.7) +
scale_x_continuous(breaks=2015:2023, labels=2015:2023)
annual_plot
head(hotnights_annual1)
# plot both on the same graph
hotnights_annual1$threshold = "20C"
hotnights_annual1
hotnights_annual2$threshold = "Local"
head(hotnights_annual2)
hotnights_combined = rbind(hotnights_annual1, hotnights_annual2)
View(hotnights_combined)
ggplot(hotnights_combined) +
geom_line(aes(year, n_hot_nights, color=threshold)) +
theme_classic() +
xlab("Year") + ylab("Number of hot nights") +
ggtitle("Annual number of hot nights, San Diego") +
theme(plot.title=element_text(size=12, hjust=0.5)) +
scale_color_viridis_d(option="magma", begin=0.2, end=0.7) +
scale_x_continuous(breaks=2015:2023, labels=2015:2023)
tmin_95 = terra::rast("data/era5-land/tmin_upper95_cali.tif")
sd_loc
sd_95 = terra::extract(tmin_95, sd_loc)
sd_95
chelsa_present = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_present_cali.tif")
plot(chelsa_present)
# read in rasters
gc_2070 = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_2070_cali.tif")
plot(gc_2070)
plot(gc_2070)
# create a coordinates object for a specific city
sd = cities %>%
dplyr::filter(City == "San Diego") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
# create a coordinates object for a specific city
sd = cities %>%
dplyr::filter(City == "San Diego") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
sd
# extract july tmin for the present day reference period
# creating columns for "year", "scenario" and model
tmin_pres = terra::extract(gc, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2010", scenario = "Present", model = "Observed")
# create a coordinates object for a specific city
sd_loc = cities %>%
dplyr::filter(City == "San Diego") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
# cities data for later analyses
cities = data.frame(
City = c("San Diego", "San Francisco", "Las Vegas", "Palm Springs"),
Longitude = c(-117.126, -122.422, -115.147, -116.527),
Latitude = c(32.728, 37.768, 36.166, 33.836),
Population_2020 = c(1386932, 873965, 641903, 44575)
)
names(gc_2070)
# create a coordinates object for a specific city
sd = cities %>%
dplyr::filter(City == "San Diego") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
sd
# extract july tmin for the present day reference period
# creating columns for "year", "scenario" and model
tmin_pres = terra::extract(gc, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2010", scenario = "Present", model = "Observed")
sd
gc
gc = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_present_cali.tif")
# read in rasters
gc_2070 = terra::rast("data/cmip6_chelsa/chelsa_tmin_july_2070_cali.tif")
# create a coordinates object for a specific city
sd = cities %>%
dplyr::filter(City == "San Diego") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"))
# extract july tmin for the present day reference period
# creating columns for "year", "scenario" and model
tmin_pres = terra::extract(gc, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2010", scenario = "Present", model = "Observed")
tmin_pres
# extract the temperatures in the future
tmin_2070 = terra::extract(gc_2070, sd, ID = FALSE) %>%
tidyr::pivot_longer(cols = everything(), names_to = "layer", values_to = "tmin") %>%
dplyr::mutate(year = "2070")
tmin_2070
# extract the names of the scenario and gcm from the raster layer name
# this code splits the names by underscores
# then subsets to the specific sections we want
tmin_2070$scenario = unlist(lapply(strsplit(tmin_2070$layer, "_"), "[", 2))
tmin_2070$model = unlist(lapply(strsplit(tmin_2070$layer, "_"), "[", 3))
tmin_2070
# combine present and future data in one data frame
tmin_change = rbind(tmin_pres, tmin_2070)
# plot the changes, colouring points by different GCMs
# includes a dashed horizontal line to reflect the present day baseline
futures_sd = tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(sd$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean night-time temperature") +
theme(plot.title = element_text(size=12, hjust=0.5),
axis.text = element_text(size=11),
axis.title = element_text(size=11.5))+
xlab("Scenario")
futures_sd
futures_sd
# plot the changes, colouring points by different GCMs
# includes a dashed horizontal line to reflect the present day baseline
futures_sd = tmin_change %>%
ggplot() +
geom_point(aes(scenario, tmin, color=model), size=2.5) +
geom_hline(yintercept = tmin_change$tmin[ tmin_change$scenario == "Present"], lty=2) +
theme_bw() +
ggtitle(sd$City) +
MetBrewer::scale_colour_met_d(name="Archambault") +
ylab("July mean night-time temperature") +
theme(plot.title = element_text(size=12, hjust=0.5),
axis.text = element_text(size=11),
axis.title = element_text(size=11.5))+
xlab("Scenario")
futures_sd
