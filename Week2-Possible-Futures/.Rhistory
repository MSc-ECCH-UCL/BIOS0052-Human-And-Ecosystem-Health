150 * 5
20 + (150*5) + 1000 + 150 + (60*5)
20 + (150*5) + 1000 + 150 + (60*6)
(15047.23)*1.1*1.1
(15047.23)*1.11
1.1*1.1
(15047.23)*1.21
1.1^4
1.1 * 1.1 * 1.1*1.1
27572 * 1.464
80 + 1000 + 500 + (60*5)
80 + 1000 + 500 + (60*6)
1000 + (180*5) + (60*5)
exp(0.2)
exp(1.41)
install.packages("knitr")
install.packages("knitr")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("knitr")
tinytex::reinstall_tinytex(repository = "illinois")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# add points per hot night to our time series graph to see when they occur
sd_plot = sd_daily %>%
ggplot() +
geom_line(aes(date, tmin), color="skyblue4") +
theme_classic() +
xlab("Date") + ylab("Tmin") +
ggtitle("San Diego, hot nights 2015-2023 (20C threshold)") +
theme(plot.title=element_text(size=12, hjust=0.5)) +
geom_point(data = hot_nights1, aes(date, tmin), color="darkred")
sd_plot
# package dependencies
# use the "install.packages()" command if not already installed
library(terra); library(dplyr); library(magrittr); library(ggplot2); library(sf)
library(rstudioapi); library(tidyr)
# automatically set working directory
# (or if this doesn't work,
# manually set your working directory to the folder "Week2-Possible-Futures")
PATH = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(PATH)
# read in USA counties data for the region
shp = sf::st_read("./data/shapefiles/usa_counties_sw.shp")
# take a look at "shp"
# what type of spatial data is this, and what information do we have?
# try plotting it - what do you see?
shp
# ggplot2 provides excellent functionality for working with sf objects
# let's add these admin boundaries to "plot1" using the geom_sf function
plot1 = plot1 +
geom_sf(data=shp, fill=NA, color="black")
tmin_daily = terra::rast("data/era5-land/tmin_daily_cali_20152023.tif")
# create a data frame of containing the XY coordinates
sd_loc = data.frame(Location = "San Diego", x = -117.126, y = 32.728)
# convert into an sf object and look at it - now it has a geometry field
sd_loc = sf::st_as_sf(sd_loc, coords = c("x", "y"))
sd_loc
# ensure the CRS is harmonised with the raster data
sf::st_crs(sd_loc) = terra::crs(tmin_daily)
# run terra::extract on the entire raster stack
# outputs a dataframe with columns as layers, and rows as locations
# a bit difficult to see what's going on as it's a very wide 1-row dataframe!
sd_daily = terra::extract(tmin_daily, sd_loc, ID=FALSE)
# convert to a longform dataframe using pivot_longer
# what is in this dataframe?
sd_daily = sd_daily %>%
tidyr::pivot_longer(cols = everything(), names_to = "date", values_to = "tmin")
head(sd_daily)
# to work effectively with dates/times in R, we need to ensure they are encoded in the correct format
# check the current class of the "date" column - stored as a character
class(sd_daily$date)
# convert to a date format
# remove the "X" from the start of the string, then format as a Date
# now R can recognise the sequential nature of the dates for plotting and analysis
sd_daily$date = substr(sd_daily$date, 2, 15)
sd_daily$date = as.Date(sd_daily$date, format="%Y_%m_%d")
class(sd_daily$date)
# subset to identify dates meeting this criteria
hot_nights1 = sd_daily[ sd_daily$tmin > 20, ]
# how many? 183 over 9 years
nrow(hot_nights1)
sd_plot = sd_daily %>%
ggplot() +
geom_line(aes(date, tmin), color="skyblue4") +
theme_classic() +
xlab("Date") + ylab("Tmin") +
ggtitle("San Diego, hot nights 2015-2023 (20C threshold)") +
theme(plot.title=element_text(size=12, hjust=0.5)) +
geom_point(data = hot_nights1, aes(date, tmin), color="darkred")
sd_plot
hot_nights1$year = lubridate::year(hot_nights1$date)
hot_nights1
head(hot_nights1)
hotnights_annual1 = as.data.frame(table(hot_nights1$year))
hotnights_annual1
head(hotnights_annual1)
hotnights_annual1 = as.data.frame(table(hot_nights1$year)) %>%
dplyr::rename("Year"=1, "NumberHotNights"=2)
head(hotnights_annual1, 10)
hotnights_annual1 = hot_nights1 %>%
dplyr::group_by(year) %>%
dplyr::summarise(n_hot_nights = length(date))
hotnights_annual1
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# extract 95th pc theshold
tmin_upper = terra::rast("./data/era5-land/tmin_upper95_cali.tif")
thresh = terra::extract(tmin_upper, sd_loc, ID=FALSE)
